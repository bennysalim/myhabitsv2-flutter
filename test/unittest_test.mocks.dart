// Mocks generated by Mockito 5.3.2 from annotations
// in myhabitsv2/test/unittest_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:myhabitsv2/models/badhabit_model.dart' as _i3;
import 'package:myhabitsv2/models/goodhabit_model.dart' as _i2;
import 'package:myhabitsv2/services/badhabit_api.dart' as _i6;
import 'package:myhabitsv2/services/goodhabit_api.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGoodHabitModel_0 extends _i1.SmartFake
    implements _i2.GoodHabitModel {
  _FakeGoodHabitModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBadHabitModel_1 extends _i1.SmartFake implements _i3.BadHabitModel {
  _FakeBadHabitModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GoodHabitAPI].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoodHabitAPI extends _i1.Mock implements _i4.GoodHabitAPI {
  MockGoodHabitAPI() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void getUserID() => super.noSuchMethod(
        Invocation.method(
          #getUserID,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<List<_i2.GoodHabitModel>> getAllGoodHabitFromAPI() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllGoodHabitFromAPI,
          [],
        ),
        returnValue:
            _i5.Future<List<_i2.GoodHabitModel>>.value(<_i2.GoodHabitModel>[]),
      ) as _i5.Future<List<_i2.GoodHabitModel>>);
  @override
  _i5.Future<List<_i2.GoodHabitModel>> getGoodHabitFromAPIPerDay() =>
      (super.noSuchMethod(
        Invocation.method(
          #getGoodHabitFromAPIPerDay,
          [],
        ),
        returnValue:
            _i5.Future<List<_i2.GoodHabitModel>>.value(<_i2.GoodHabitModel>[]),
      ) as _i5.Future<List<_i2.GoodHabitModel>>);
  @override
  _i5.Future<_i2.GoodHabitModel> postGoodHabitToAPI(
          _i2.GoodHabitModel? goodHabit) =>
      (super.noSuchMethod(
        Invocation.method(
          #postGoodHabitToAPI,
          [goodHabit],
        ),
        returnValue: _i5.Future<_i2.GoodHabitModel>.value(_FakeGoodHabitModel_0(
          this,
          Invocation.method(
            #postGoodHabitToAPI,
            [goodHabit],
          ),
        )),
      ) as _i5.Future<_i2.GoodHabitModel>);
  @override
  _i5.Future<bool> editGoodHabitToAPI(_i2.GoodHabitModel? goodHabit) =>
      (super.noSuchMethod(
        Invocation.method(
          #editGoodHabitToAPI,
          [goodHabit],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<bool> deleteHabitToAPI(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteHabitToAPI,
          [id],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}

/// A class which mocks [BadHabitAPI].
///
/// See the documentation for Mockito's code generation for more information.
class MockBadHabitAPI extends _i1.Mock implements _i6.BadHabitAPI {
  MockBadHabitAPI() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void getUserID() => super.noSuchMethod(
        Invocation.method(
          #getUserID,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<List<_i3.BadHabitModel>> getAllBadHabitFromAPI() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllBadHabitFromAPI,
          [],
        ),
        returnValue:
            _i5.Future<List<_i3.BadHabitModel>>.value(<_i3.BadHabitModel>[]),
      ) as _i5.Future<List<_i3.BadHabitModel>>);
  @override
  _i5.Future<_i3.BadHabitModel> postBadHabitToAPI(
          _i3.BadHabitModel? badHabit) =>
      (super.noSuchMethod(
        Invocation.method(
          #postBadHabitToAPI,
          [badHabit],
        ),
        returnValue: _i5.Future<_i3.BadHabitModel>.value(_FakeBadHabitModel_1(
          this,
          Invocation.method(
            #postBadHabitToAPI,
            [badHabit],
          ),
        )),
      ) as _i5.Future<_i3.BadHabitModel>);
  @override
  _i5.Future<bool> putHabitToAPI(_i3.BadHabitModel? badHabit) =>
      (super.noSuchMethod(
        Invocation.method(
          #putHabitToAPI,
          [badHabit],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<bool> updatePerSeconds(_i3.BadHabitModel? badHabit) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePerSeconds,
          [badHabit],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<bool> deleteHabitToAPI(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteHabitToAPI,
          [id],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}
